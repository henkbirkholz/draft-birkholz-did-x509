



Network Working Group                                        H. Birkholz
Internet-Draft                                            Fraunhofer SIT
Intended status: Standards Track                             A. Chamayou
Expires: 20 April 2026                                         Microsoft
                                                         17 October 2025


             Decentralized Identifiers (DID) Method did:509
                     draft-birkholz-did-x509-latest

Abstract

   Some abstract

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/henkbirkholz/draft-birkholz-did-x509.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 April 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Identifier Syntax
     3.1.  Percent-encoding
     3.2.  "subject" policy
     3.3.  "san" policy
     3.4.  "eku" policy
     3.5.  "fulcio-issuer" policy
     3.6.  DID resolution options
   4.  CDDL for a JSON Data Model for X.509 Certification Paths
   5.  Privacy Considerations
   6.  Security Consideration
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Some intro

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   In this document, CDDL [RFC8610] [RFC9165] is used to describe the
   data formats, and ABNF (defined in [RFC5234]) to describe
   identifiers.

   The reader is assumed to be familiar with the vocabulary and concepts
   defined in [I-D.ietf-scitt-architecture].

3.  Identifier Syntax

   The did:x509 ABNF definition can be found below, which uses the
   syntax defined in [RFC5234] and the corresponding definitions for
   ALPHA and DIGIT.  The [DIDV1] contains the definition for idchar.

   abnf did-x509 = "did:" method-name ":" method-specific-id method-name
   = "x509" method-specific-id = version ":" ca-fingerprint-alg ":" ca-
   fingerprint 1*("::" policy-name ":" policy-value) version = 1*DIGIT
   ca-fingerprint-alg = "sha256" / "sha384" / "sha512" ca-fingerprint =
   base64url policy-name = 1*ALPHA policy-value = *(1*idchar ":")
   1*idchar base64url = 1*(ALPHA / DIGIT / "-" / "_")

   In this draft, version is 0.

   ca-fingerprint-alg is one of sha256, sha384, or sha512. ca-
   fingerprint is chain[i].fingerprint[ca-fingerprint-alg] with i > 0,
   that is, either an intermediate or root CA certificate. policy-name
   is a policy name and policy-value is a policy-specific value. :: is
   used to separate multiple policies from each other.

   The following sections define the policies and their policy-specific
   syntax.

   Validation of policies is formally defined using [REGO] policies,
   though there is no expectation that implementations use Rego.

   The input to the Rego engine is the JSON document {"did": "<DID>",
   "chain": <CertificateChain>}.

   Core Rego policy:

   ```rego parse_did(did) := [ca_fingerprint_alg, ca_fingerprint,
   policies] if { prefix := "did:x509:0:" startswith(did, prefix) ==
   true rest := trim_prefix(did, prefix) parts := split(rest, "::")
   [ca_fingerprint_alg, ca_fingerprint] := split(parts[0], ":")
   policies_raw := array.slice(parts, 1, count(parts)) policies := [y |
   some i s := policies_raw[i] j := indexof(s, ":") y := [substring(s,
   0, j), substring(s, j+1, -1)] ] }

   valid if { [ca_fingerprint_alg, ca_fingerprint, policies] :=
   parse_did(input.did) ca := [c | some i; i != 0; c := input.chain[i]]
   ca[_].fingerprint[ca_fingerprint_alg] == ca_fingerprint
   valid_policies := [i | some i [name, value] := policies[i]
   validate_policy(name, value) ] count(valid_policies) ==
   count(policies) } ```

   The overall Rego policy is assembled by concatenating the core Rego
   policy with the Rego policy fragments in the following sections, each
   one defining a validate_policy function.

3.1.  Percent-encoding

   Some of the policies that are defined in subsequent sections require
   values to be percent-encoded.  Percent-encoding is specified in
   Section 2.1 of [RFC3986].  All characters that are not in the allowed
   set defined below must be percent-encoded:

   abnf allowed = ALPHA / DIGIT / "-" / "." / "_"

   Note that most libraries implement percent-encoding in the context of
   URLs and do NOT encode ~ (%7E).

3.2.  "subject" policy

   abnf policy-name = "subject" policy-value = key ":" value *(":" key
   ":" value) key = label / oid value = 1*idchar label = "CN" / "L" /
   "ST" / "O" / "OU" / "C" / "STREET" oid = 1*DIGIT *("." 1*DIGIT)

   <key>:<value> are the subject name fields in chain[0].subject in any
   order.  Field repetitions are not allowed.  Values must be percent-
   encoded.

   Example:

   did:x509:0:sha256:WE4P5dd8DnLHSkyHaIjhp4udlkF9LqoKwCvu9gl38jk::subjec
   t:C:US:ST:California:L:San%20Francisco:O:GitHub%2C%20Inc.

   Rego policy: rego validate_policy(name, value) := true if { name ==
   "subject" items := split(value, ":") count(items) % 2 == 0 subject :=
   {k: v | some i i % 2 == 0 k := items[i] v :=
   urlquery.decode(items[i+1]) } count(subject) >= 1
   object.subset(input.chain[0].subject, subject) == true }

3.3.  "san" policy

   abnf policy-name = "san" policy-value = san-type ":" san-value san-
   type = "email" / "dns" / "uri" san-value = 1*idchar

   san-type is the SAN type and must be one of email, dns, or uri.  Note
   that dn is not supported.

   san-value is the SAN value, percent-encoded.

   The pair [<san_type>, <san_value>] is one of the items in
   chain[0].extensions.san.

   Example:

   did:x509:0:sha256:WE4P5dd8DnLHSkyHaIjhp4udlkF9LqoKwCvu9gl38jk::san:em
   ail:bob%40example.com

   Rego policy: rego validate_policy(name, value) := true if { name ==
   "san" [san_type, san_value_encoded] := split(value, ":") san_value :=
   urlquery.decode(san_value_encoded) [san_type, san_value] ==
   input.chain[0].extensions.san[_] }

3.4.  "eku" policy

   abnf policy-name = "eku" policy-value = eku eku = oid oid = 1*DIGIT
   *("." 1*DIGIT)

   eku is one of the OIDs within chain[0].extensions.eku.

   Example:

   did:x509:0:sha256:WE4P5dd8DnLHSkyHaIjhp4udlkF9LqoKwCvu9gl38jk::eku:1.
   3.6.1.4.1.311.10.3.13

   Rego policy: rego validate_policy(name, value) := true if { name ==
   "eku" value == input.chain[0].extensions.eku[_] }

3.5.  "fulcio-issuer" policy

   abnf policy-name = "fulcio-issuer" policy-value = fulcio-issuer
   fulcio-issuer = 1*idchar

   fulcio-issuer is chain[0].extensions.fulcio_issuer without leading
   https://, percent-encoded.

   Example:

   did:x509:0:sha256:WE4P5dd8DnLHSkyHaIjhp4udlkF9LqoKwCvu9gl38jk::fulcio
   -issuer:accounts.google.com::san:email:bob%40example.com

   Example 2:

   did:x509:0:sha256:WE4P5dd8DnLHSkyHaIjhp4udlkF9LqoKwCvu9gl38jk::fulcio
   -issuer:token.actions.githubusercontent.com::san:uri:https%3A%2F%2Fgi
   thub.com%2Focto-org%2Focto-
   automation%2F.github%2Fworkflows%2Foidc.yml%40refs%2Fheads%2Fmain

   Rego policy: rego validate_policy(name, value) := true if { name ==
   "fulcio-issuer" suffix := urlquery.decode(value) concat("",
   ["https://", suffix]) == input.chain[0].extensions.fulcio_issuer }

3.6.  DID resolution options

   This DID method introduces a new DID resolution option called
   x509chain:

   Name: x509chain

   Value type: string

   The value is constructed as follows:

   1.  Encode each certificate C that is part of the chain as the string
       b64url(DER(C)).

   2.  Concatenate the resulting strings in order, separated by comma
       ",".

4.  CDDL for a JSON Data Model for X.509 Certification Paths

CertificateChain = [2*Certificate]  ; leaf is first

Certificate = {
    fingerprint: {
        ; base64url-encoded hashes of the DER-encoded certificate
        sha256: base64url,     ; FIPS 180-4, SHA-256
        sha384: base64url,     ; FIPS 180-4, SHA-384
        sha512: base64url      ; FIPS 180-4, SHA-512
    },
    issuer: Name,              ; RFC 5280, Section 4.1.2.4
    subject: Name,             ; RFC 5280, Section 4.1.2.6
    extensions: {
        ? eku: [+OID],         ; RFC 5280, Section 4.2.1.12
        ? san: [+SAN],         ; RFC 5280, Section 4.2.1.6
        ? fulcio_issuer: tstr  ; http://oid-info.com/get/1.3.6.1.4.1.57264.1.1
    }
}

; X.509 Name as an object of attributes
; Repeated attribute types are not supported
; Common attribute types have human-readable labels (see below)
; Other attribute types use dotted OIDs
; Values are converted to UTF-8
Name = {
    ; See RFC 4514, Section 3, for meaning of common attribute types
    ? CN: tstr,
    ? L: tstr,
    ? ST: tstr,
    ? O: tstr,
    ? OU: tstr,
    ? C: tstr,
    ? STREET: tstr,
    * OID => tstr
}

; base64url-encoded data, see RFC 4648, Section 5
base64url = tstr

; ASN.1 Object Identifier
; Dotted string, for example "1.2.3"
OID = tstr

; X.509 Subject Alternative Name
; Strings are converted to UTF-8
SAN = rfc822Name / DNSName / URI / DirectoryName
rfc822Name = ["email", tstr] ; Example: ["email", "bill@microsoft.com"]
DNSName = ["dns", tstr]      ; Example: ["dns", "microsoft.com"]
URI = ["uri", tstr]          ; Example: ["uri", "https://microsoft.com"]
DirectoryName = ["dn", Name] ; Example: ["dn", {CN: "Microsoft"}]

        Figure 1: CDDL definition of did:x.509 JSON Data Model

5.  Privacy Considerations

   Some considerations

6.  Security Consideration

7.  IANA Considerations


   // RFC Editor: Please replace "RFCthis" with the RFC number assigned
   to this document.


   // RFC Editor: Some considerations

8.  References

8.1.  Normative References

   [BCP26]    Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/rfc/rfc8126>.

   [DIDV1]    "W3C DID v1.0 specification", n.d.,
              <https://www.w3.org/TR/2022/REC-did-core-20220719/>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/rfc/rfc3986>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <https://www.rfc-editor.org/rfc/rfc5234>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
              June 2019, <https://www.rfc-editor.org/rfc/rfc8610>.

   [RFC9165]  Bormann, C., "Additional Control Operators for the Concise
              Data Definition Language (CDDL)", RFC 9165,
              DOI 10.17487/RFC9165, December 2021,
              <https://www.rfc-editor.org/rfc/rfc9165>.

   [STD90]    Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/rfc/rfc8259>.

   [STD94]    Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", STD 94, RFC 8949,
              DOI 10.17487/RFC8949, December 2020,
              <https://www.rfc-editor.org/rfc/rfc8949>.

8.2.  Informative References

   [I-D.ietf-scitt-architecture]
              Birkholz, H., Delignat-Lavaud, A., Fournet, C., Deshpande,
              Y., and S. Lasker, "An Architecture for Trustworthy and
              Transparent Digital Supply Chains", Work in Progress,
              Internet-Draft, draft-ietf-scitt-architecture-22, 10
              October 2025, <https://datatracker.ietf.org/doc/html/
              draft-ietf-scitt-architecture-22>.

   [REGO]     "Rego", n.d.,
              <https://www.openpolicyagent.org/docs/latest/policy-
              language/>.

Acknowledgments

   The authors would like to thank _list_ for their reviews and
   suggestions.

Authors' Addresses

   Henk Birkholz
   Fraunhofer SIT
   Email: henk.birkholz@ietf.contact


   Amaury Chamayou
   Microsoft
   Email: Amaury.Chamayou@microsoft.com
